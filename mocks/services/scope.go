// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/services/scope.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/vnFuhung2903/vcs-user-management-service/entities"
)

// MockIScopeService is a mock of IScopeService interface.
type MockIScopeService struct {
	ctrl     *gomock.Controller
	recorder *MockIScopeServiceMockRecorder
}

// MockIScopeServiceMockRecorder is the mock recorder for MockIScopeService.
type MockIScopeServiceMockRecorder struct {
	mock *MockIScopeService
}

// NewMockIScopeService creates a new mock instance.
func NewMockIScopeService(ctrl *gomock.Controller) *MockIScopeService {
	mock := &MockIScopeService{ctrl: ctrl}
	mock.recorder = &MockIScopeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIScopeService) EXPECT() *MockIScopeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIScopeService) Create(ctx context.Context, scopeName string) (*entities.UserScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, scopeName)
	ret0, _ := ret[0].(*entities.UserScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIScopeServiceMockRecorder) Create(ctx, scopeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIScopeService)(nil).Create), ctx, scopeName)
}

// FindMany mocks base method.
func (m *MockIScopeService) FindMany(ctx context.Context, scopeNames []string) ([]*entities.UserScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", ctx, scopeNames)
	ret0, _ := ret[0].([]*entities.UserScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockIScopeServiceMockRecorder) FindMany(ctx, scopeNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockIScopeService)(nil).FindMany), ctx, scopeNames)
}

// FindOne mocks base method.
func (m *MockIScopeService) FindOne(ctx context.Context, scopeName string) (*entities.UserScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, scopeName)
	ret0, _ := ret[0].(*entities.UserScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockIScopeServiceMockRecorder) FindOne(ctx, scopeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockIScopeService)(nil).FindOne), ctx, scopeName)
}
