// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/repositories/scope.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/vnFuhung2903/vcs-user-management-service/entities"
	repositories "github.com/vnFuhung2903/vcs-user-management-service/usecases/repositories"
	gorm "gorm.io/gorm"
)

// MockIScopeRepository is a mock of IScopeRepository interface.
type MockIScopeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIScopeRepositoryMockRecorder
}

// MockIScopeRepositoryMockRecorder is the mock recorder for MockIScopeRepository.
type MockIScopeRepositoryMockRecorder struct {
	mock *MockIScopeRepository
}

// NewMockIScopeRepository creates a new mock instance.
func NewMockIScopeRepository(ctrl *gomock.Controller) *MockIScopeRepository {
	mock := &MockIScopeRepository{ctrl: ctrl}
	mock.recorder = &MockIScopeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIScopeRepository) EXPECT() *MockIScopeRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockIScopeRepository) BeginTransaction(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockIScopeRepositoryMockRecorder) BeginTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockIScopeRepository)(nil).BeginTransaction), ctx)
}

// Create mocks base method.
func (m *MockIScopeRepository) Create(name string) (*entities.UserScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(*entities.UserScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIScopeRepositoryMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIScopeRepository)(nil).Create), name)
}

// Delete mocks base method.
func (m *MockIScopeRepository) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIScopeRepositoryMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIScopeRepository)(nil).Delete), name)
}

// FindById mocks base method.
func (m *MockIScopeRepository) FindById(scopeId uint) (*entities.UserScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", scopeId)
	ret0, _ := ret[0].(*entities.UserScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockIScopeRepositoryMockRecorder) FindById(scopeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockIScopeRepository)(nil).FindById), scopeId)
}

// FindByName mocks base method.
func (m *MockIScopeRepository) FindByName(name string) (*entities.UserScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(*entities.UserScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockIScopeRepositoryMockRecorder) FindByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockIScopeRepository)(nil).FindByName), name)
}

// WithTransaction mocks base method.
func (m *MockIScopeRepository) WithTransaction(tx *gorm.DB) repositories.IScopeRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", tx)
	ret0, _ := ret[0].(repositories.IScopeRepository)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockIScopeRepositoryMockRecorder) WithTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockIScopeRepository)(nil).WithTransaction), tx)
}
